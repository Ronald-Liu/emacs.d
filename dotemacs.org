* Packages
#+BEGIN_SRC emacs-lisp
(straight-use-package 'smex)
(straight-use-package 'magit)
(straight-use-package 'smartparens)
(straight-use-package 'ibuffer-vc)
(straight-use-package 'expand-region)
(straight-use-package 'monokai-theme)
(straight-use-package 'git-gutter-fringe)
(straight-use-package 'ag)
(straight-use-package 'highlight-indentation)
(straight-use-package 'yari)
(straight-use-package 'sr-speedbar)
(straight-use-package 'htmlize)
(straight-use-package 'xonsh-mode)
(straight-use-package 'all-the-icons)
(straight-use-package 'wgrep)
#+END_SRC

* Ido (Deprecated)
-#+BEGIN_SRC emacs-lisp
(require 'ido-completing-read+)
(require 'flx-ido)

(ido-mode t)
(ido-everywhere t)
(flx-ido-mode 1)

(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
(setq ido-use-filename-at-point nil)
(setq ido-auto-merge-work-directories-length 0)
;;(setq ido-use-virtual-buffers nil)
(setq flx-ido-threshold 10000)
(setq ido-default-buffer-method 'selected-window)

(setq ido-ignore-buffers '("\\` " "^\*magit" "^\*Compile"
                           "^\*Backtrace" "^\*Help" "^\*Ibuffer\*"
                           "^\*Ido Completions" "^\*scratch"
                           "^\*Messages" "^\*Kill Ring"
                           "^\*HTTP Response" "^\*tramp/sshx"
                           "^\*tramp/sudo" "^\*Completions"))
-#+END_SRC
* Ivy
#+BEGIN_SRC emacs-lisp
(straight-use-package 'ivy)
(require 'ivy)

(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)

(global-set-key (kbd "C-c C-r") 'ivy-resume)
(global-set-key (kbd "C-x l") 'counsel-locate)
(define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
(global-set-key (kbd "C-s") 'swiper)

(global-set-key (kbd "C-x b") 'ivy-switch-buffer)
(global-set-key (kbd "C-c v") 'ivy-push-view)
(global-set-key (kbd "C-c V") 'ivy-pop-view)

;;(global-set-key (kbd "C-c b") 'counsel-bookmark)
;;(global-set-key (kbd "C-c i") 'counsel-imenu)
(global-set-key (kbd "M-y") 'counsel-yank-pop)
;;(global-set-key (kbd "C-x C-f") 'counsel-find-file)
;;(global-set-key (kbd "M-x") 'counsel-M-x)
(setq counsel-find-file-at-point t)
#+END_SRC

* SMex (Deprecated in favor of Ivy)
Smart M-x
-#+BEGIN_SRC emacs-lisp
(require 'smex)
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
-#+END_SRC

* GUI
** Misc
#+BEGIN_SRC emacs-lisp
(menu-bar-mode t)
(setq display-time-24hr-format t)
(setq kill-ring-max 200)
(setq inhibit-startup-message t)
(setq major-mode 'text-mode)
(show-paren-mode t)
(setq frame-title-format "%f")
(setq make-backup-files nil)
(fset 'yes-or-no-p 'y-or-n-p)
(setq require-final-newline t)
(which-func-mode t)
(blink-cursor-mode nil)
(global-auto-revert-mode t)
(delete-selection-mode t)
(setq tab-always-indent 'complete)
;; export PS1='\[\033[01;32m\]\u@\[\033[01;34m\]\w\[\033[00m\]\$ '
;; (setq shell-file-nama "/bin/bash")
(setq shell-file-name "/bin/zsh")
(setq comint-process-echoes t)
(setq default-fill-column 80)

(setq mac-option-modifier 'meta
      mac-command-modifier 'super
      ns-function-modifier 'hyper)

(when (display-graphic-p)
  (tool-bar-mode -1)
  (scroll-bar-mode -1))
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path
             (concat config-directory "site-lisp"))
(add-to-list 'custom-theme-load-path (expand-file-name "~/.emacs.d/themes/"))
(straight-use-package 'doom-themes)
(require 'all-the-icons)
(load-theme 'doom-nord-light t)

;; Enable flashing mode-line on errors
(doom-themes-visual-bell-config)

;; Enable custom neotree theme (all-the-icons must be installed!)
(doom-themes-neotree-config)
;; or for treemacs users
(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
(doom-themes-treemacs-config)

;; Corrects (and improves) org-mode's native fontification.
(doom-themes-org-config)

(add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
#+END_SRC

(add-to-list 'default-frame-alist '(ns-appearance . dark))

** Tabs
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
#+END_SRC

** EShell
-#+BEGIN_SRC emacs-lisp
(straight-use-package 'xterm-color)
(require 'eshell)
(require 'xterm-color)

(add-hook 'eshell-mode-hook
          (lambda ()
            (setenv "TERM" "xterm-256color")))
(add-hook 'eshell-before-prompt-hook (setq xterm-color-preserve-properties t))
(add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
(setq eshell-output-filter-functions
     (remove 'eshell-handle-ansi-color eshell-output-filter-functions))
-#+END_SRC 
** Speedbar
#+BEGIN_SRC emacs-lisp
(setq speedbar-use-images nil)
#+END_SRC 

* Keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-j") 'newline-and-indent)
(global-set-key (kbd "C-x C-b") 'ibuffer)
(global-set-key "%" 'match-paren)
(global-set-key (kbd "C-x c m") 'max-screen)
(global-set-key (kbd "C-x c q") 'save-buffers-kill-terminal)
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C-; d") 'dired)

(global-set-key (kbd "C-c b") 'bookmark-jump)
(global-set-key (kbd "C-c i") 'imenu)
(global-set-key (kbd "C-c p") 'pop-to-mark-command)

(global-set-key (kbd "C-c f u") 'ffap-next-url)
(setq mac-option-modifier 'super
      mac-command-modifier 'meta
      ns-function-modifier 'hyper)
#+END_SRC

** Switch Window
#+BEGIN_SRC emacs-lisp
(straight-use-package 'ace-window)
(global-set-key (kbd "M-o") 'ace-window)
#+END_SRC

* Smartparens
Minor mode for Emacs that deals with parens pairs and tries to be smart about it.
#+BEGIN_SRC emacs-lisp
(smartparens-global-mode t)
(defun disable-smartparens(mode)
  (add-to-list 'sp-ignore-modes-list mode))
#+END_SRC

* Org-Mode
** Keybind
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c o a") 'org-agenda)
(global-set-key (kbd "C-c o c") 'org-capture)
#+END_SRC

** File extension
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org.txt\\'" . org-mode))
#+END_SRC

** Settings
#+BEGIN_SRC emacs-lisp
(setq org-time-stamp-rounding-minutes (quote (30)))
#+END_SRC

** Capture Templates
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("t" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
         "* TODO %?\n  %i\n  %a")
        ("j" "Journal" entry (file+datetree "~/org/journal.org")
         "* %?\nEntered on %U\n  %i\n  %a")))
#+END_SRC

** Babel
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((dot . t)
   (emacs-lisp . t)
   (gnuplot . t)
   (latex . t)
   (ledger . t)
   (sql . nil)
   (sqlite . t)))
#+END_SRC

** Tomato
#+BEGIN_SRC emacs-lisp
(straight-use-package 'org-pomodoro)
(setq org-pomodoro-length 25)
(defun notify-osx (title message)
  (call-process "/usr/local/bin/terminal-notifier"
                nil 0 nil
                "-group" "Emacs"
                "-title" title
                "-sound" "default"
                "-sender" "org.gnu.Emacs"
                "-message" message))
 
;; org-pomodoro mode hooks
(add-hook 'org-pomodoro-finished-hook
          (lambda ()
          (notify-osx "Pomodoro completed!" "Time for a break.")))

(add-hook 'org-pomodoro-break-finished-hook
          (lambda ()
          (notify-osx "Pomodoro Short Break Finished" "Ready for Another?")))

(add-hook 'org-pomodoro-long-break-finished-hook
          (lambda ()
            (notify-osx "Pomodoro Long Break Finished" "Ready for Another?")))

(add-hook 'org-pomodoro-killed-hook
          (lambda ()
          (notify-osx "Pomodoro Killed" "One does not simply kill a pomodoro!")))
#+END_SRC

** Download image
#+BEGIN_SRC emacs-lisp
(straight-use-package 'org-download)
(require 'org-download)
#+END_SRC

* Company
Autocompletion
#+BEGIN_SRC emacs-lisp
(straight-use-package 'company)
(require 'company)

(define-key company-active-map "\C-n" 'company-select-next)
(define-key company-active-map "\C-p" 'company-select-previous)
(setq company-idle-delay 0.5)
#+END_SRC

#+RESULTS:
: 0.5

* iBuffer
#+BEGIN_SRC emacs-lisp
(require 'ibuffer-vc)
(defun custom-ibuffer-view()
  (ibuffer-vc-set-filter-groups-by-vc-root)
  (unless (eq ibuffer-sorting-mode 'filename/process)
    (ibuffer-do-sort-by-filename/process)))
(defun ibuffer-setup()
  (custom-ibuffer-view))
(add-hook 'ibuffer-hook 'ibuffer-setup)

(require 'ibuffer)
(require 'ibuf-ext)
(require 'tramp)
(eval-when-compile
  (require 'cl))

(defun ibuffer-tramp-connection (buf)
  "Return a cons cell (method . host), or nil if the file is not
using a TRAMP connection"
  (let ((file-name (with-current-buffer buf (or buffer-file-name default-directory))))
    (when (tramp-tramp-file-p file-name)
      (let ((method (tramp-file-name-method (tramp-dissect-file-name file-name)))
      (host (tramp-file-name-host (tramp-dissect-file-name file-name))))
  (cons method host)))))

(defun ibuffer-tramp-generate-filter-groups-by-tramp-connection ()
  "Create a set of ibuffer filter groups based on the TRAMP connection of buffers"
  (let ((roots (ibuffer-remove-duplicates
                (delq nil (mapcar 'ibuffer-tramp-connection (buffer-list))))))
    (mapcar (lambda (tramp-connection)
              (cons (format "%s:%s" (car tramp-connection) (cdr tramp-connection))
                    `((tramp-connection . ,tramp-connection))))
            roots)))

(define-ibuffer-filter tramp-connection
    "Toggle current view to buffers with TRAMP connection QUALIFIER."
  (:description "TRAMP connection"
                :reader (read-from-minibuffer "Filter by TRAMP connection (regexp): "))
  (ibuffer-awhen (ibuffer-tramp-connection buf)
    (equal qualifier it)))

(defun ibuffer-tramp-set-filter-groups-by-tramp-connection ()
  "Set the current filter groups to filter by TRAMP connection."
  (interactive)
  (setq ibuffer-filter-groups (ibuffer-tramp-generate-filter-groups-by-tramp-connection))
  (ibuffer-update nil t))

(add-hook 'ibuffer-hook
   (lambda ()
      (ibuffer-tramp-set-filter-groups-by-tramp-connection)
      (ibuffer-do-sort-by-alphabetic)))
#+END_SRC
** ibuffer-project-alist
#+BEGIN_SRC emacs-lisp
(straight-use-package 'ibuffer-project)
#+END_SRC

* TRAMP
** Share control path with SSH
#+BEGIN_SRC emacs-lisp
(customize-set-variable
           'tramp-ssh-controlmaster-options
           (concat
             "-o ControlPath=~/.ssh/controlpath-%%h-%%p-%%r "
             "-o ControlMaster=auto -o ControlPersist=yes"))

#+END_SRC

* Projectile
-#+BEGIN_SRC emacs-lisp
(straight-use-package 'projectile)
(require 'projectile)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)

(projectile-mode +1)
(with-eval-after-load "projectile"
  (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
  (add-to-list 'projectile-project-root-files-top-down-recurring ".projectile_gpay")
  (add-to-list 'projectile-project-root-files-top-down-recurring "BUILD"))
;;(setq projectile-track-known-projects-automatically nil)
;;(setq projectile-indexing-method 'native)
;;(setq projectile-project-root-files-functions '(projectile-root-local))
;;(setq-local projectile-project-root "/google/src/cloud/liurnd/f0/google3/nbu/paisa/gpay/app/")
-#+END_SRC


* Language
** Origami
Folding
#+BEGIN_SRC emacs-lisp
(straight-use-package 'origami)
(require 'origami)
#+END_SRC


** LSP-Mode
#+BEGIN_SRC emacs-lisp
(straight-use-package 'lsp-mode)
(straight-use-package 'dap-mode)
(straight-use-package 'lsp-ui)
(straight-use-package 'lsp-dart)
(straight-use-package 'lsp-ivy)

(require 'lsp-mode)
(require 'lsp-dart)
;(setq lsp-print-performance t)
;(setq lsp-enable-folding nil)
(setq lsp-before-save-edits nil)

(require 'lsp-ui)
(define-key lsp-ui-mode-map [remap xref-find-definitions] #'lsp-ui-peek-find-definitions)
(define-key lsp-ui-mode-map [remap xref-find-references] #'lsp-ui-peek-find-references)

(require 'lsp-ivy)
(define-key lsp-mode-map [remap xref-find-apropos] #'lsp-ivy-workspace-symbol)
(setq lsp-ui-peek-enable t)

(setq lsp-ui-sideline-show-diagnostics t)
(setq lsp-ui-sideline-show-hover nil)
(setq lsp-ui-sideline-show-code-actions t)

;;(face-spec-set
;; 'lsp-ui-sideline-code-action
;; '((t :foreground "thistle"
;;      :weight bold
;;      ))
;; 'face-defface-spec
;; )

(setq lsp-prefer-capf t)

(setq lsp-idle-delay 1.500)
(setq lsp-ui-doc-enable nil)
(setq lsp-ui-doc-position 'bottom)
(setq lsp-ui-doc-use-webkit t)

(setq lsp-diagnostic-package :flymake)
(setq lsp-enable-snippet nil)

(setq lsp-enable-links nil)
(setq lsp-enable-symbol-highlighting nil)

;;(setq lsp-enable-symbol-highlighting nil)
;(define-key lsp-ui-mode-map (kbd "C-c l") 'lsp-ui-imenu)
;;(with-eval-after-load "projectile"
;;  (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
;;  (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))

;;(setq lsp-auto-guess-root t)
(straight-use-package 'lsp-treemacs)
(lsp-treemacs-sync-mode 1)

(setq lsp-dart-main-code-lens nil)
(setq lsp-dart-test-code-lens nil)
(setq lsp-dart-suggest-from-unimported-libraries nil)
#+END_SRC

*** Folding 
#+BEGIN_SRC emacs-lisp
(straight-use-package 'lsp-origami)

(add-hook 'lsp-after-open-hook #'lsp-origami-try-enable)

(define-key lsp-ui-mode-map [C-tab] 'origami-recursively-toggle-node)
(define-key lsp-ui-mode-map (kbd "M-<up>") 'origami-previous-fold)
(define-key lsp-ui-mode-map (kbd "M-<down>") 'origami-next-fold)
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
;;(straight-use-package 'racer)
(straight-use-package 'rust-mode)
(setq rust-indent-offset 2)
(require 'rust-mode)
(add-hook 'rust-mode-hook #'lsp-deferred)
;;(add-hook 'racer-mode-hook #'eldoc-mode)
;;(add-hook 'racer-mode-hook #'company-mode)


;;(setq company-tooltip-align-annotations t)
;;(setq racer-rust-src-path "/usr/local/google/home/liurnd/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src")
(setq lsp-rust-rls-server-command "/Users/liurnd/.cargo/bin/rls")
#+END_SRC

#+RESULTS:
: /Users/liurnd/.cargo/bin/rls

** Typescript
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  (setq typescript-indent-level 
    (or (plist-get (tide-tsfmt-options) ':indentSize) 2))
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)

;;(setq tide-tsserver-process-environment '("TSS_LOG=-level verbose -file /Users/liurnd/tss.log"))
(setq tide-tsserver-executable "/usr/local/bin/tsserver")
(setq tide-node-executable "/usr/local/bin/node")
#+END_SRC

#+RESULTS:
: /usr/local/bin/node

** C
#+BEGIN_SRC emacs-lisp
(defun c-mode-common-hook-settings()
  (setq c-basic-offset 2)
  (hide-ifdef-mode t)
  (setq fill-column 80))
(add-hook 'c-mode-common-hook 'c-mode-common-hook-settings)
#+END_SRC


** Common
#+BEGIN_SRC emacs-lisp
(straight-use-package 'string-inflection)
(require 'string-inflection)
(global-set-key (kbd "C-c u") 'string-inflection-cycle)
#+END_SRC

#+RESULTS:
: string-inflection-cycle

** Java
*** string-inflection
#+BEGIN_SRC emacs-lisp
(add-hook 'java-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-c C-u") 'string-inflection-java-style-cycle)))
(add-hook 'java-mode-hook #'display-fill-column-indicator-mode)
#+END_SRC
** Dart
#+BEGIN_SRC emacs-lisp
(add-hook 'dart-mode-hook #'display-fill-column-indicator-mode)
#+END_SRC
** Ledger
#+BEGIN_SRC emacs-lisp
(straight-use-package 'ledger-mode)
#+END_SRC
** Graphviz
#+BEGIN_SRC emacs-lisp
(straight-use-package 'graphviz-dot-mode)
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
(straight-use-package 'yaml-mode)
#+END_SRC

       



#+RESULTS:
: t

* GPG
#+BEGIN_SRC emacs-lisp
(require 'epa-file)
(custom-set-variables '(epg-gpg-program  "/usr/local/bin/gpg"))
(epa-file-enable)
#+END_SRC

* Misc
#+BEGIN_SRC emacs-lisp
(straight-use-package 'xcscope)
(require 'xcscope)
(cscope-setup)
(require 'expand-region)
#+END_SRC

* Treemacs
#+BEGIN_SRC emacs-lisp
(straight-use-package 'treemacs)
(require 'treemacs)

(setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         35)

(treemacs-follow-mode t)
(treemacs-filewatch-mode t)
(treemacs-fringe-indicator-mode t)
(global-set-key (kbd "M-0") 'treemacs-select-window)
;;global-map
;        ()
;        ()
;        ("C-x t t"   . treemacs)
;        ("C-x t B"   . treemacs-bookmark)
 ;       ("C-x t C-t" . treemacs-find-file)
  ;      ("C-x t M-t" . treemacs-find-tag)))
#+END_SRC


* Flycheck
#+BEGIN_SRC emacs-lisp
(straight-use-package 'flycheck)
(require 'flycheck)
(define-key flycheck-mode-map (kbd "M-n") 'flycheck-next-error)
(define-key flycheck-mode-map (kbd "M-p") 'flycheck-previous-error)
#+END_SRC

#+RESULTS:
: flycheck-previous-error

* Flymake
#+BEGIN_SRC emacs-lisp
(require 'flymake)
(setq flymake-no-changes-timeout 5)

(define-key flymake-mode-map (kbd "M-n") 'flymake-goto-next-error)
(define-key flymake-mode-map (kbd "M-p") 'flymake-goto-prev-error)
#+END_SRC

* yasnippets
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'yasnippet)
  (yas-global-mode 1)
;  (setq yas-snippet-dirs '(
;                           "~/.emacs-google.d/snippets/"
;                           "~/.emacs.d/snippets/"
;                           "~/.emacs-google-config/emacs-google-config/devtools/editors/emacs/google-yasnippets/"
;  ))
#+END_SRC

#+RESULTS:
: t


* Preformance tune
#+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 1000000000)
(setq read-process-output-max (* 10240 1024))
#+END_SRC
